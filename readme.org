#+latex_class: cn-article
#+title: Android Compose
#+author: deepwaterooo

* 【TODO：】
- *【亲爱的表哥的活宝妹，任何时候，亲爱的表哥的活宝妹，就是一定要、一定会嫁给活宝妹的亲爱的表哥！！！爱表哥，爱生活！！！】*
- 亲爱的表哥的活宝妹，原本只想要、简单修改这个先前项目里的【BUG：】，但是没有想到，现在用更新版本的AS 编译不过。。
- 会继续【编译通过】并【BUG：】修改掉，显然轻易可见的【BUG：】，至至少可以方便日常使用的程度

* Android Compose
- 我找这个先前的相对有点儿代表性的项目找了好久，以为弄丢了。改天有兴趣的时候，可以接着再改一改
** current update
- 写到这种程度，我已经想办法解决了我自己想要实现的绝大部分目标：作为一
  个个性化的练手项目，可以自由的增删加载图片（可以借助第三方库增删本机
  图片），可以实现富文本编辑
- 关于BUG的部分：如果能够加载网络图片，能够实现Note文本部分的富文本编
  辑已经算是一个很好的Note了，但是因为自己最初是想过加载本地图片的，并
  实现了图库相机的权限管理部分，所以对本地图片的部分并没有删除，这里并
  引入了一下bug #1: 当我使用coil库rememberImagePainter加载Uri文件的时
  候，在launch主界面NotesScreen里，会永远是最久远的Note的本地图片才能
  显示，因为它最后加载，覆盖了之前的所有的内容（每一个有本地图片的Note
  的加载应该是需要在它自己民的scope里去加载）；另整合的第三方库的
  GRicheditorView聚焦事件还没有处理彻底，会take my time慢慢把这两个bug修
  复
- 安卓的世界不只有compose，这是一次很好的练习，接下来会配置好emacs的
  kotlin-mode,会练习kotlin编程，会练习mvvm以及拓展现在安卓知识面的深度，
  会在安卓的世界里拓展拓深。。。。。。
  
[[./pic/screens8.png]]

** TOTO: 
- 这个项目的目标暂时定在这里，clean up之后暂放一下（gif的部分，因为整
  合了第三方库都暂不作考虑了），改天有新的想法再整合实现和修改
** prev updates
- G Rich Editor Text easy integeration
   
   [[./pic/screens7.jpg]]

- 关于图片加载部分，原库只（再double check一下）加载网络图片，并用网络
  javascript处理，原项目中实现过的地地图片与拍照等只能忍痛每个Note只能
  加载一张本机图片了，并且固定文末，不可文中随意加载。。。
   
   [[./pic/screens6.jpg]]

- 想要试图通过annotatedString的拼接与composable的事件传递与拦截来实现
  全compose版本的富文本编辑，但一方面compose的基础不够，另则比较新和前
  沿一点的知识点网络上的资源有限，遇到困难不方面查询和解决问题，这里也
  可能思路不能，暂时放弃
- 关于EditText span html富文本手动实现的部分，原理都懂，如果想要，改天会再开一个
  repository专门练习富文件的某些功能的实现，目前暂时就在compose中插入
  一个xml layout AndroidView版本的第三方库
- 找不到开放的表情包api，可能就会放弃网上动态抓取表情包了，下载自己到
  本地，自己练习一下

   [[./pic/1.jpg]]
   
- 原本只想把搜狗输入法中的表情包能够在我自己的note显示出来，.gif动图，
  试运行中
- 对于文本内容中如何显示动图，仍在探索中，对于“点击
  [http://pinyin.cn/e461273]查看表情”我应该需要先解析，自己手动下载，
  这里不是.gif网址链接，是无法用代码实现下载的，另换思路。

[[./pic/screens1.png]]
- 目前每条note可以选择添加一张图片，并在首页每条note各自的显示中若有图
  片，将固定大小的小图片是首页中显示出来
- fix掉了所有目前知晓的bug
- 把Jetpack compose相机、读取媒体图片文件的权限申请加入到项目中，并实
  现每个Notes中图片的存储与读取
  
[[./pic/screens2.png]]
  
[[./pic/screens5.png]]

- 真正写的过程中会遇到问题，解决问题的过程才是真正有意义价值，帮助自己
  成长的，所以还是想要多写一些

- 目前所写的，对于我来说更多的更像是小朋友拼拼图，在原架构的基础上稍微
  拼拼改改就出来了，还没怎么涉及kotlin语言中learning curve真正出现的地
  方，coroutines, flow, 所有还很想再多写一些，现在写的太小儿科了。。。。。。
*** fixed ones:
- BUG #2: 当用户自定义选择颜色时，爱心形状的图标，不知道是哪里的原因，
  残留了一个背景圆圈的背景，需要fix掉：fix bug #3的时候，仔细检查了一
  遍关于color picker中是否用到黑圈，但是没有，想来与爱心形状有一定的关
  系；而fix bug1让每种选定的黑圈能够正式显示出来，觉得自宝义颜色也需要
  一个黑圈显得更为系统化一些，就暂且放过这个隐藏得很深的"bug"吧
- bug #1: 被我导入的两个黑圈：如果我定义了圆圈的黑圈描边，那么会仍然需
  要控制变量、当点击了其它背景颜色时来取消现自定义黑圈边，不如暂且简单
  不管它（暂时埋掉了）
- BUG #3: 当用户自定义颜色的中途选择了保存，当再次加载时，自定义长方形
  区小圆圈所标定的最后一次选定颜色值是对的，但小圆圈的位置不对（也就是
  这样一个颜色选择器中，大长方形中的小圆圈，透明度值小长方形以及竖条中
  的小长方形最后一次被用户点击时所在的位置，需要记忆一下），影响用
  户体验, easy fix
- 加载图片：希望能够实现更多的功能：在不同的位置加载图片，有的位置可以
  出来，有的位置却不可以，最开始是在出不来的位置测试，浪费了很多时间，
  放到正确的位置，却很容易就出来了，会把图片的功能link好
  
[[./pic/screens.png]]

- 整合了一个来自于godaddy的android compose colorpicker，目前只是做到了
  build successfully(昨天晚上被block在这里，今天终于把这个给移除了)
  - compose color picker库来自于：
    https://github.com/godaddy/compose-color-picker
  - 因为对项目中screen, event等感觉理解得还不够透彻，所以想要试图添加
    一些功能来进一步地练习
  - 可以直接build.gradle引入第三方库，但为练习的目的，我还是直接把相关
    的一个一个文件自己试图建一个项目中的library,果然在build的过程中遇
    到过一点儿小问题，练习一遍的目的大概就在于此吧。。。
  
[[./pic/screens3.png]]

- Have been exposed to Kotlin a couple of years ago, had learned
  languagel fundamentals, but have not really practices a lot...
- Now finally I am exposed to this Jetpack Compose, and absolutely like it
- By following this tutorial and tried to type some code using Android
  Studio ide, I finally begin to think why nowadays, ide emacs keybindings
  plugins are so popular...I want to configure and get use to some
  majority of IDE emacs keybindings too (currently feels very wired
  typing in IDE... Emacs has always been my main editor, and feel way
  more comfortable coding using my emacs, but may/would learn to
  switch to IDE when looking for errors, debugging and fixing bugs）
  - 现在的IDE功能是狠强大，虽然自己只是个emacs弱弱，但是emacs是自己使
    用多年，各种强大的功能仍然不是简单的IDE emacs keybindings就能比拟
    的。Emacs仍将永远是自己开发的首选Editor，如果debug的时候不喜欢ide
    emacs keybindings，等到闲暇时可能会像想要开发出记忆中的陈桥五笔输
    入法一样自己去开发ide emacs pluging，把自己喜欢的功能全部
    keybinding出来。。。。。。
- will get more practices on JetPack Compose......, and more practices
  on Kotlin programming too

- 但我仍然需要对整个项目的screen, event flow以及navigation有很好的理解，
  才能真正完成填加一个用户自定义自己选择一种favoriate颜色的功能
  - 原本以为进一步在点击自定义背景颜色的按钮后增加一个screen会很容易，
    但这里我的思维仍然还不够清楚；也尝试过NavController的解决办法，仍
    然有些思绪不够清楚。。。最终想到了一个最简单的解决办法：在现有架构
    的基础上，模仿toggle sort options的办法，用最后一个圈来toggle
    color picker，并自底向上根据viewmodel中现便签颜色值的变化来数据驱
    动更新UI(现便签的背景颜色，以及画圈),最后一个思路很简单比较容易实
    现
  - 这里在用最简单的办法解决自己的问题的时候，新产生了一个bug：不是自
    定义颜色的时候会有两个黑圈，并且有一个黑圈还不对应现背景颜色，还没
    想清楚这个bug产生的原因，会把它fix掉

